// -*- Mode: C; c-basic-offset: 8; -*-
//
// Copyright (c) 2012 Andrew Tridgell, All Rights Reserved
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
//  o Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  o Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.
//

///
/// @file	mavlink.c
///
/// mavlink reporting code
///

/*
          we use a hand-crafted MAVLink packet based on the following
	  message definition

	  <message name="RADIO" id="166">
	    <description>Status generated by radio</description>
            <field type="uint8_t" name="rssi">local signal strength</field>
            <field type="uint8_t" name="remrssi">remote signal strength</field>
	    <field type="uint8_t" name="txbuf">percentage free space in transmit buffer</field>
	    <field type="uint8_t" name="noise">background noise level</field>
	    <field type="uint8_t" name="remnoise">remote background noise level</field>
	    <field type="uint16_t" name="rxerrors">receive errors</field>
	    <field type="uint16_t" name="fixed">count of error corrected packets</field>
	  </message>
*/


#include <stdarg.h>
#include "mavlink.h"

uint8_t g_mavlinkBuffer[MAV_MAX_PACKET_LENGTH];

static uint8_t g_sequenceNumber;

/*
 * Calculates the MAVLink checksum on a packet in parameter buffer 
 * and append it after the data
 */
static void mavlink_crc(uint8_t* buf)
{
	register uint8_t length = buf[1];
    uint16_t sum = 0xFFFF;
	uint8_t i, stoplen;

	stoplen = length + MAV_HEADER_SIZE + 1;

	// MAVLink 1.0 has an extra CRC seed
	buf[length + MAV_HEADER_SIZE] = MAVLINK_RADIO_CRC_EXTRA;

	i = 1;
	while (i<stoplen) {
		register uint8_t tmp;
		tmp = buf[i] ^ (uint8_t)(sum&0xff);
		tmp ^= (tmp<<4);
		sum = (sum>>8) ^ (tmp<<8) ^ (tmp<<3) ^ (tmp>>4);
		i++;
        }

	buf[length+MAV_HEADER_SIZE] = sum&0xFF;
	buf[length+MAV_HEADER_SIZE+1] = sum>>8;
}


/// send a MAVLink status report packet
void MAVLink_report(void)
{
	g_mavlinkBuffer[0] = 254;
	g_mavlinkBuffer[1] = sizeof(struct mavlink_RADIO_v10);
	g_mavlinkBuffer[2] = g_sequenceNumber++;
	g_mavlinkBuffer[3] = RADIO_SOURCE_SYSTEM;
	g_mavlinkBuffer[4] = RADIO_SOURCE_COMPONENT;
	g_mavlinkBuffer[5] = MAVLINK_MSG_ID_RADIO;

	struct mavlink_RADIO_v10 *m = (struct mavlink_RADIO_v10 *)&g_mavlinkBuffer[MAV_HEADER_SIZE];
	m->rxerrors = 0; // errors.rx_errors;
	m->fixed    = 0; //errors.corrected_packets;
	m->txbuf    = 50; //serial_read_space();
	m->rssi     = 123; //statistics.average_rssi;
	m->remrssi  = 64; //remote_statistics.average_rssi;
	m->noise    = 0; //statistics.average_noise;
	m->remnoise = 0; //remote_statistics.average_noise;

	mavlink_crc(g_mavlinkBuffer);

	Serial.write(g_mavlinkBuffer, sizeof(g_mavlinkBuffer));

	/*
	if (serial_write_space() < sizeof(struct mavlink_RADIO_v09)+8) {
		// don't cause an overflow
		return;
	}

	serial_write_buf(g_mavlinkBuffer, sizeof(struct mavlink_RADIO_v09)+8);
	*/
}
